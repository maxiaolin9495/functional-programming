Lemma sumP: sum(xs++ys) .=. sum xs + sum ys
  Proof by induction on List xs
    Case []
      To show: sum([] ++ ys) .=. sum[] + sum ys
      Proof
                                 sum([] ++ ys)
               (by def ++)   .=. sum ys
                                 sum[] + sum ys
               (by def sum)  .=. 0 + sum ys
               (by zeroAdd)  .=. sum ys
      QED
    Case x:xs
      To show: sum ((x:xs)++ys) .=. sum(x:xs) + sum ys
      IH: sum(xs++ys) .=. sum xs + sum ys
      Proof
                                 sum((x:xs)++ys)
               (by def ++)   .=. sum(x:(xs++ys))
               (by def sum)  .=. x + sum(xs ++ ys)
               (by IH)       .=. x + (sum xs + sum ys)
               (by addAssoc) .=. x + sum xs + sum ys
               (by def sum)  .=. sum(x:xs) + sum ys
      QED
  QED
Lemma: sum (inorder t) .=. sumTree t
  Proof by induction on Tree t
    Case Leaf
      To show: sum (inorder Leaf) .=. sumTree Leaf
      Proof
                                      sum (inorder Leaf)
                (by def inorder)   .=.sum []
                (by def sum)       .=.0
                                      sumTree Leaf
                (by def sumTree)   .=.0
      QED
    Case Node l n r
      To show: sum (inorder (Node l n r)) .=. sumTree (Node l n r)
      IHl: sum (inorder l) .=. sumTree l
      IHr: sum (inorder r) .=. sumTree r
      Proof
                                   sum (inorder (Node l n r))
      (by def inorder)          .=.sum ((inorder l) ++ (n : (inorder r)))
      (by sumP)                 .=.sum (inorder l) + sum (n : (inorder r))
      (by def sum)              .=.sum (inorder l) + (n + sum (inorder r))
      (by addAssoc)             .=.sum (inorder l) + n + sum (inorder r)
                                   sumTree (Node l n r)
      (by def sumTree)          .=.sumTree l + n + sumTree r
      (by IHl)                  .=.sum (inorder l) + n + sumTree r
      (by IHr)                  .=.sum (inorder l) + n + sum (inorder r)
      QED
  QED
